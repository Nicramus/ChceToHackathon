<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" >
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <s:Label text="lokalizacja: {data.address ? data.address : 'ul. Strzelecka 16'}"/>
    <s:HGroup width="100%">
        <s:Button click="button1_clickHandler(event)" label="Foto" width="100%"/>
        <s:Button click="button1_clickHandler(event)" label="Z pliku" width="100%"/>
    </s:HGroup>

    <s:TextInput id="titleInput" prompt="Podaj tytuł" width="100%" text="{data.label}"/>

    <s:TextArea id="descriptionInput" prompt="Podaj opis" width="100%" height="100" text="{data.description}"/>

    <!--<s:SpriteVisualElement id="sprite1" width="200" height="150"/>-->
    <s:Image id="image1" width="100%" height="100"/>

    <s:Spacer height="100%" />

    <s:Button id="saveBtn" click="save(event)" width="100%" label="ZAPISZ"/>

    <fx:Script><![CDATA[
        import mx.formatters.DateFormatter;

        import pl.needapp.chcetu.data.DB;
        import pl.needapp.chcetu.data.DBWpis;


        /* OBSŁUGA KAMERKI */
        private var deviceCameraApp:CameraUI = new CameraUI();
        private var imageLoader:Loader;

        protected function button1_clickHandler(event:MouseEvent):void {
            this.stage.align = StageAlign.TOP_LEFT;
            this.stage.scaleMode = StageScaleMode.NO_SCALE;

            if (CameraUI.isSupported) {
                trace("Initializing camera...");

                deviceCameraApp.addEventListener(MediaEvent.COMPLETE, imageCaptured);
                deviceCameraApp.addEventListener(Event.CANCEL, captureCanceled);
                deviceCameraApp.addEventListener(ErrorEvent.ERROR, cameraError);
                deviceCameraApp.launch(MediaType.IMAGE);
            }
            else {
                trace("Camera interface is not supported.");
            }
        }

        private function imageCaptured(event:MediaEvent):void {
            trace("Media captured...");

            var imagePromise:MediaPromise = event.data;

            if (imagePromise.isAsync) {
                trace("Asynchronous media promise.");
                imageLoader = new Loader();
                imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, asyncImageLoaded);
                imageLoader.addEventListener(IOErrorEvent.IO_ERROR, cameraError);

                imageLoader.loadFilePromise(imagePromise);
            }
            else {
                trace("Synchronous media promise.");
                imageLoader.loadFilePromise(imagePromise);
                showMedia(imageLoader);
            }
        }

        private function captureCanceled(event:Event):void {
            trace("Media capture canceled.");
            NativeApplication.nativeApplication.exit();
        }

        private function asyncImageLoaded(event:Event):void {
            trace("Media loaded in memory.");
            showMedia(imageLoader);
        }

        private function showMedia(loader:Loader):void {
            //skalujemy do 800x600
            var scale:Number = 800 / loader.width;
            var matrix:Matrix = new Matrix();
            matrix.scale(scale, scale);

            var bd:BitmapData = new BitmapData(loader.width*scale, loader.height*scale);
            bd.draw(loader, matrix);

            image1.source = bd;
            image1.height = bd.height * (image1.width / bd.width);
        }

        private function cameraError(error:ErrorEvent):void {
            trace("Error:" + error.text);
            NativeApplication.nativeApplication.exit();
        }

        public static function encode(image:BitmapData):ByteArray {
            PNGEncoder2.level = CompressionLevel.NORMAL;
            return PNGEncoder2.encode(image);

//            var enc:JPGEncoder = new JPGEncoder(85);
//            var jpg:ByteArray = enc.encode(image);
//            return jpg;
        }

        private function save(event:MouseEvent):void {
            var byteArray:ByteArray;
            var t1:int = getTimer();
            trace("zaczynam enkodować");
            if(image1.source is BitmapData) {
                byteArray = encode(image1.source as BitmapData);
            }
            var t2:int = getTimer();
            trace("czas enkodowania to:", t2 - t1);

            var fileNaME:String = "NeedApp/photo1020.png";
            if(byteArray) {
                var f:File = File.userDirectory.resolvePath(fileNaME);
                var fs:FileStream = new FileStream();
                fs.open(f,FileMode.WRITE);
                fs.writeBytes(byteArray);
                fs.close();
            }

            var dateFormat:DateFormatter = new DateFormatter("DD-MM-YYY hh:mm");

            var nowyWpis:DBWpis = new DBWpis(titleInput.text, dateFormat.format(new Date()), "1", "0", descriptionInput.text,
                    fileNaME, "droga_rowerowa", "Adam", [], data.address ? data.address : 'ul. Strzelecka 16')

            DB.instance.dbWpisy.addItem(nowyWpis);

            navigator.pushView(WpisyView);

        }



        ]]></fx:Script>
</s:View>
