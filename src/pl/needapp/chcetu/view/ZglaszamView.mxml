<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="_cc()" title="Zgłaszam coś" color="white">
    <s:layout>
        <s:VerticalLayout padding="25" gap="15"/>
    </s:layout>

    <!--<s:Label text="Miejsce: {data.address ? data.address : 'ul. Strzelecka 16'}" fontSize="{Config.fontSize}"/>-->
    <s:HGroup width="100%" verticalAlign="middle">
        <!--<s:Button styleName="buttonOrange" click="button1_clickHandler(event)" label="Foto" width="100%"/>-->
        <!--<s:Button styleName="buttonOrange"  click="button1_clickHandler(event)" label="Z pliku" width="100%"/>-->

        <s:Label text="CHCE coś zgłosić tutaj: " styleName="h1" width="100%"/>
        <s:Label text="A może gdzieś indziej?" textDecoration="underline" fontSize="18" />
    </s:HGroup>

    <s:Group width="100%" >
        <s:Rect width="100%" height="100%" radiusX="3" radiusY="3" alpha="0.2">
            <s:fill>
                <s:SolidColor color="white" />
            </s:fill>
        </s:Rect>
        <s:Label text="{data.address ? data.address : 'ul. Strzelecka 16'}" fontSize="24" top="15" bottom="15" width="100%" textAlign="center" fontStyle="italic"/>
    </s:Group>

    <mx:Spacer height="5"/>
    <s:Label text="{data.label}" styleName="h1"/>
    <s:TextArea id="titleInput" width="100%" height="50" prompt="podaj tytuł"/>

    <mx:Spacer height="5"/>
    <s:Label text="A może tak dokładniej:" styleName="h1"/>
    <s:TextArea id="descriptionInput" prompt="podaj opis" width="100%" height="80" text="{data.description}" />

    <mx:Spacer height="5"/>
    <s:Label text="No i foto:" styleName="h1"/>
    <s:HGroup width="100%" gap="10">
        <s:Button click="button1_clickHandler(event)" label="Dodaj foto z aparatu" fontSize="24" width="100%"/>
        <s:Button click="button1_clickHandler(event)" label="Dodaj foto z pliku" fontSize="24" width="100%"/>
    </s:HGroup>

    <s:Group width="100%" height="100%">
        <s:Rect width="100%" height="100%" radiusX="3" radiusY="3" alpha="0.1">
            <s:fill>
                <s:SolidColor color="white" />
            </s:fill>
        </s:Rect>
        <s:Image id="image1" left="10" right="10" top="10" bottom="10" />
    </s:Group>
    <s:Spacer height="30" />

    <s:Button id="saveBtn" click="save(event)" width="100%" label="Zgłoś" styleName="buttonOrange" />

    <fx:Script><![CDATA[
        import mx.formatters.DateFormatter;

        import pl.needapp.chcetu.Config;

        import pl.needapp.chcetu.data.DB;
        import pl.needapp.chcetu.data.DBWpis;

        import skins.IconHelper;
        import skins.SkinConfig;


        /* OBSŁUGA KAMERKI */
        private var deviceCameraApp:CameraUI = new CameraUI();
        private var imageLoader:Loader;

        protected function button1_clickHandler(event:MouseEvent):void {
            this.stage.align = StageAlign.TOP_LEFT;
            this.stage.scaleMode = StageScaleMode.NO_SCALE;

            if (CameraUI.isSupported) {
                trace("Initializing camera...");

                deviceCameraApp.addEventListener(MediaEvent.COMPLETE, imageCaptured);
                deviceCameraApp.addEventListener(Event.CANCEL, captureCanceled);
                deviceCameraApp.addEventListener(ErrorEvent.ERROR, cameraError);
                deviceCameraApp.launch(MediaType.IMAGE);
            }
            else {
                trace("Camera interface is not supported.");
            }
        }

        private function imageCaptured(event:MediaEvent):void {
            trace("Media captured...");

            var imagePromise:MediaPromise = event.data;

            if (imagePromise.isAsync) {
                trace("Asynchronous media promise.");
                imageLoader = new Loader();
                imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, asyncImageLoaded);
                imageLoader.addEventListener(IOErrorEvent.IO_ERROR, cameraError);

                imageLoader.loadFilePromise(imagePromise);
            }
            else {
                trace("Synchronous media promise.");
                imageLoader.loadFilePromise(imagePromise);
                showMedia(imageLoader);
            }
        }

        private function captureCanceled(event:Event):void {
            trace("Media capture canceled.");
            NativeApplication.nativeApplication.exit();
        }

        private function asyncImageLoaded(event:Event):void {
            trace("Media loaded in memory.");
            showMedia(imageLoader);
        }

        private function showMedia(loader:Loader):void {
            //skalujemy do 800x600
            var scale:Number = 800 / loader.width;
            var matrix:Matrix = new Matrix();
            matrix.scale(scale, scale);

            var bd:BitmapData = new BitmapData(loader.width*scale, loader.height*scale);
            bd.draw(loader, matrix);

            image1.source = bd;
            image1.height = bd.height * (image1.width / bd.width);
        }

        private function cameraError(error:ErrorEvent):void {
            trace("Error:" + error.text);
            NativeApplication.nativeApplication.exit();
        }

        public static function encode(image:BitmapData):ByteArray {
            PNGEncoder2.level = CompressionLevel.NORMAL;
            return PNGEncoder2.encode(image);

//            var enc:JPGEncoder = new JPGEncoder(85);
//            var jpg:ByteArray = enc.encode(image);
//            return jpg;
        }

        private function save(event:MouseEvent):void {
            var byteArray:ByteArray;
            var t1:int = getTimer();
            trace("zaczynam enkodować");
            if(image1.source is BitmapData) {
                byteArray = encode(image1.source as BitmapData);
            }
            var t2:int = getTimer();
            trace("czas enkodowania to:", t2 - t1);


            var fileNativePath:String = "";
            if(byteArray) {
                var rand:int = (Math.random() * 100);
                var fileNaME:String = "NeedApp/photo" + rand + ".png";
                var f:File = File.userDirectory.resolvePath(fileNaME);
                var fs:FileStream = new FileStream();
                fs.open(f, FileMode.WRITE);
                fs.writeBytes(byteArray);
                fs.close();

                fileNativePath = f.nativePath;
//                fileNativePath = "/sdcard/" + fileNaME;

            }

            var dateFormat:DateFormatter = new DateFormatter("DD-MM-YYY hh:mm");

            var nowyWpis:DBWpis = new DBWpis(titleInput.text, dateFormat.format(new Date()), "1", "0", descriptionInput.text,
                    fileNativePath, "droga_rowerowa", "Adam", [], data.address ? data.address : 'ul. Strzelecka 16');

            DB.instance.dbWpisy.addItem(nowyWpis);

            navigator.pushView(WpisyView, {label : "Moje wpisy", icon : IconHelper.renderDefault(Icon_notes_list), view : WpisyView, type:"my" });

        }

        private function _cc():void {
            saveBtn.setStyle("icon", IconHelper.render(Icon_pin, SkinConfig.BIG_ICON_SIZE, SkinConfig.BIG_ICON_SIZE, 0xffffff));
        }



        ]]></fx:Script>
</s:View>
