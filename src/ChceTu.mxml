<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication contentBackgroundAlpha="0" addedToStage="_added()" xmlns:fx="http://ns.adobe.com/mxml/2009"
                            xmlns:s="library://ns.adobe.com/flex/spark" firstView="pl.needapp.chcetu.view.HomeView"
                            creationComplete="_cc()" xmlns:ui="pl.needapp.chcetu.view.ui.*"
                            xmlns:mx="library://ns.adobe.com/flex/mx">

    <fx:Style source="skins/mobile.css" />
    <s:states>
        <s:State name="normal"/>
        <s:State name="menu"/>
    </s:states>

    <s:navigationContent>
        <mx:Spacer width="10"/>
        <s:Image source="{undoIcon}" alpha="0.9" click="{navigator.popView()}" visible="{navigator.activeView.title != 'Start'}"/>
        <mx:Spacer width="10"/>
        <s:Image source="{menuIcon}" click="{setCurrentState(currentState == 'normal' ? 'menu' : 'normal')}" alpha="0.9"/>
        <mx:Spacer width="20"/>
        <s:Image width="198" height="60" source="{IconHelper.render(Skin_logo, 198, 60)}"/>
        <ui:LeftMenu width="300" height="700" includeInLayout="false" y="70" includeIn="menu"/>
        <mx:Spacer width="20" />

    </s:navigationContent>

    <s:actionContent>
        <s:Image source="{pyra1}" alpha="0.9"/>
        <mx:Spacer width="5" />
        <s:Image source="{pyra2}" alpha="0.9"/>
        <mx:Spacer width="5" />
        <s:Image source="{pyra3}" alpha="0.9"/>
        <mx:Spacer width="20" />
        <s:Image source="{searchIcon}" alpha="0.9"/>
    </s:actionContent>



    <fx:Script><![CDATA[
        import caurina.transitions.properties.ColorShortcuts;
        import caurina.transitions.properties.DisplayShortcuts;

        import mx.core.FlexGlobals;
        import mx.core.UIComponent;

        import pl.needapp.chcetu.view.ZglaszamView;

        import pl.needapp.chcetu.view.HomeView;

        import skins.IconHelper;
        import skins.SkinConfig;

        import spark.components.ViewNavigator;

        public static var view:StageWebView;
        public static var NAVIGATOR:ViewNavigator;
        public static var ROOT:ChceTu;

        [Bindable]
        private var menuIcon : *;

        [Bindable]
        private var searchIcon : *;

        [Bindable]
        private var undoIcon : *;

        [Bindable]
        private var pyra1 : *;

        [Bindable]
        private var pyra2 : *;

        [Bindable]
        private var pyra3 : *;


        private function _cc():void {
            ColorShortcuts.init();
            DisplayShortcuts.init();

            NAVIGATOR = navigator;
            ROOT = this;

            undoIcon = IconHelper.render(Icon_undo, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);
            menuIcon = IconHelper.render(Icon_menu, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);
            searchIcon = IconHelper.render(Icon_search, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);

            pyra1 = IconHelper.render(Icon_potato, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);
            pyra2 = IconHelper.render(Icon_potato, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);
            pyra3 = IconHelper.render(Icon_potato, SkinConfig.ICON_SIZE, SkinConfig.ICON_SIZE, 0xffffff);
        }

        private function _added():void {


        }

        public function hideMenu():void {
            setCurrentState("normal");
        }

        public static function showHTML(url:String, s:String = null):void {
            //TODO Do komunikacji https://code.google.com/p/stagewebviewbridge/

            view = new StageWebView();
            view.stage = (FlexGlobals.topLevelApplication as UIComponent).stage;
            view.viewPort = new Rectangle(0, 80, view.stage.stageWidth, view.stage.stageHeight - 80);
            if (url) {
                view.loadURL(url);
            }
            else {
                view.loadString(s);
            }
            view.addEventListener( LocationChangeEvent.LOCATION_CHANGING,
                    handleLocationChanging );

        }

        private static function handleLocationChanging(event:LocationChangeEvent):void {
            event.preventDefault();

            //location parameter will have a absolute path of the .html file as a prefix
            var strParameters:Array = (event.location as String).split("$");
            NAVIGATOR.pushView(ZglaszamView, {label: "Przydałaby się ścieżka rowerowa"});
            trace(strParameters[1] + "Is the string received from Javascript");
        }

        public static function hideHTML():void {
            view.stage = null;
            view.viewPort = null;
            view.dispose();
            view = null;
        }
        ]]></fx:Script>
</s:ViewNavigatorApplication>
